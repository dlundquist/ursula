---
- name: install neutron-data-network packages
  apt: pkg={{ item }}
  with_items:
    - dnsmasq
    - dnsmasq-utils
    - iputils-arping
    - ucarp
    - radvd

- name: install packages for l3ha
  apt: pkg={{ item }}
  with_items:
    - keepalived
    - conntrackd
  when: neutron.l3ha.enabled|bool

- include: dnsmasq.yml

- include: igmp-router.yml
  when: neutron.plugin == 'ml2' and 'vxlan' in neutron.tunnel_types and not neutron.l2_population

- name: assert kernel supports vxlan
  command: modinfo -F version vxlan
  changed_when: false
  when: "'vxlan' in neutron.tunnel_types"

- name: assert iproute2 supports vxlan
  command: ip link add type vxlan help
  register: iproute_out
  changed_when: false
  failed_when: iproute_out.rc == 255
  when: "'vxlan' in neutron.tunnel_types"

- name: neutron lbaas config
  template:
    src: etc/neutron/neutron_lbaas.conf
    dest: /etc/neutron/neutron_lbaas.conf
    mode: 0644
  when: (neutron.lbaas.enable == "smart" and
         groups['controller'][0] not in groups['compute']) or
         neutron.lbaas.enable|bool
  notify:
    - restart neutron lbaas agent

- name: neutron lbaas agent config
  template:
    src: etc/neutron/services/loadbalancer/haproxy/lbaas_agent.ini
    dest: /etc/neutron/services/loadbalancer/haproxy
    mode: 0644
  when: (neutron.lbaas.enable == "smart" and
         groups['controller'][0] not in groups['compute']) or
         neutron.lbaas.enable|bool
  notify:
    - restart neutron lbaas agent

- name: install neutron-data-network services
  upstart_service:
    name: "{{ item.key }}"
    user: neutron
    start_on: "starting neutron-linuxbridge-agent"
    stop_on: "stopping neutron-linuxbridge-agent"
    cmd: "/usr/local/bin/{{ item.key }}"
    pidfile: "{{ item.value.pidfile|default(omit) }}"
    config_dirs: /etc/neutron
    config_files: /etc/neutron/neutron.conf,{{ item.value.config_files }}
    envs: "{{ neutron.service.envs }}"
  with_dict: neutron.agents

- meta: flush_handlers

- name: start neutron-data-network services
  service: name={{ item.key }} state=started
  with_dict: neutron.agents

- include: ipchanged.yml

- include: monitoring.yml tags=monitoring,common
  when: monitoring.enabled|default('True')|bool
